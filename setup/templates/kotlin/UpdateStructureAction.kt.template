package com.your.plugin

import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.vfs.LocalFileSystem
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.openapi.ui.DialogWrapper
import com.intellij.ui.components.JBList
import com.intellij.ui.components.JBScrollPane
import com.intellij.openapi.ui.Messages
import java.awt.Dimension
import javax.swing.*
import java.awt.BorderLayout

class DirectorySelectionDialog(
    private val project: com.intellij.openapi.project.Project,
    private val directories: List<VirtualFile>
) : DialogWrapper(project) {  // Changed to make dialog modal and project-centered
    private val listModel = DefaultListModel<String>()
    private val list = JBList(listModel).apply {
        selectionMode = ListSelectionModel.MULTIPLE_INTERVAL_SELECTION
    }
    private val dirMap = mutableMapOf<String, VirtualFile>()

    init {
        title = "Select Directories for Documentation"
        directories.forEach { dir ->
            val path = dir.path.removePrefix(project.basePath ?: "")
            dirMap[path] = dir
            listModel.addElement(path)
        }
        init()  // Initialize dialog
    }

    override fun createCenterPanel(): JComponent {
        return JPanel(BorderLayout()).apply {
            preferredSize = Dimension(400, 300)

            add(JLabel("Select directories to document (multiple selection allowed):"), BorderLayout.NORTH)
            add(JBScrollPane(list), BorderLayout.CENTER)

            // Add a label showing number of directories found
            add(JLabel("Found ${listModel.size()} directories"), BorderLayout.SOUTH)
        }
    }

    fun getSelectedDirectories(): List<VirtualFile> {
        return list.selectedValuesList.mapNotNull { dirMap[it] }
    }
}

class UpdateStructureAction : AnAction() {
    override fun actionPerformed(e: AnActionEvent) {
        val project = e.project ?: return
        if (project.isDisposed) return

        try {
            project.basePath?.let { basePath ->
                val projectDir = LocalFileSystem.getInstance().findFileByPath(basePath) ?: return

                // Debug message to confirm we're looking in the right place
                Messages.showInfoMessage(project, "Scanning directory: $basePath", "Debug")

                val directories = findAllDirectories(projectDir)

                // Debug message to show found directories
                Messages.showInfoMessage(
                    project,
                    "Found ${directories.size} directories:\n${directories.joinToString("\n") { it.path }}",
                    "Found Directories"
                )

                if (directories.isEmpty()) {
                    Messages.showInfoMessage(
                        project,
                        "No directories found in the project.",
                        "Repository Structure"
                    )
                    return
                }

                // Create and show the dialog with position relative to IDE window
                val dialog = DirectorySelectionDialog(project, directories)
                if (dialog.showAndGet()) {  // This makes the dialog modal
                    val selectedDirs = dialog.getSelectedDirectories()
                    if (selectedDirs.isEmpty()) {
                        Messages.showInfoMessage(
                            project,
                            "No directories were selected.",
                            "Repository Structure"
                        )
                        return
                    }

                    val documenter = RepoStructureDocumenter(project)
                    var updatedCount = 0

                    selectedDirs.forEach { dir ->
                        try {
                            val content = documenter.generateStructure(dir)
                            WriteCommandAction.runWriteCommandAction(project) {
                                val structureFile = dir.findChild("REPOSITORY_STRUCTURE.md")
                                    ?: dir.createChildData(this, "REPOSITORY_STRUCTURE.md")
                                structureFile.setBinaryContent(content.toByteArray())
                                updatedCount++
                            }
                        } catch (ex: Exception) {
                            Messages.showErrorDialog(
                                project,
                                "Error updating ${dir.name}: ${ex.message}",
                                "Error"
                            )
                        }
                    }

                    Messages.showInfoMessage(
                        project,
                        "Successfully updated $updatedCount directory structure(s).",
                        "Repository Structure"
                    )
                }
            }
        } catch (e: Exception) {
            Messages.showErrorDialog(
                project,
                "An error occurred: ${e.message}",
                "Error"
            )
        }
    }

    private fun findAllDirectories(root: VirtualFile): List<VirtualFile> {
        val result = mutableListOf<VirtualFile>()
        if (root.isDirectory) {
            result.add(root)
            root.children
                .filter { it.isDirectory && !it.name.startsWith(".") }  // Skip hidden directories
                .forEach { result.addAll(findAllDirectories(it)) }
        }
        return result
    }

    override fun update(e: AnActionEvent) {
        val project = e.project
        e.presentation.isEnabledAndVisible = project != null
    }
}